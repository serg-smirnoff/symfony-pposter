<?php

/**
 * Base class that represents a row from the 'pp_meta' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Mon Aug  9 02:03:44 2010
 *
 * @package    lib.model.om
 */
abstract class BaseMeta extends BaseObject  implements Persistent {


  const PEER = 'MetaPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        MetaPeer
	 */
	protected static $peer;

	/**
	 * The value for the title field.
	 * @var        string
	 */
	protected $title;

	/**
	 * The value for the keywords field.
	 * @var        string
	 */
	protected $keywords;

	/**
	 * The value for the description field.
	 * @var        string
	 */
	protected $description;

	/**
	 * The value for the is_active field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $is_active;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * @var        array Parts[] Collection to store aggregation of Parts objects.
	 */
	protected $collPartss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPartss.
	 */
	private $lastPartsCriteria = null;

	/**
	 * @var        array Authors[] Collection to store aggregation of Authors objects.
	 */
	protected $collAuthorss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAuthorss.
	 */
	private $lastAuthorsCriteria = null;

	/**
	 * @var        array Photos[] Collection to store aggregation of Photos objects.
	 */
	protected $collPhotoss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPhotoss.
	 */
	private $lastPhotosCriteria = null;

	/**
	 * @var        array Pages[] Collection to store aggregation of Pages objects.
	 */
	protected $collPagess;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPagess.
	 */
	private $lastPagesCriteria = null;

	/**
	 * @var        array Faq[] Collection to store aggregation of Faq objects.
	 */
	protected $collFaqs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collFaqs.
	 */
	private $lastFaqCriteria = null;

	/**
	 * @var        array Articles[] Collection to store aggregation of Articles objects.
	 */
	protected $collArticless;

	/**
	 * @var        Criteria The criteria used to select the current contents of collArticless.
	 */
	private $lastArticlesCriteria = null;

	/**
	 * @var        array News[] Collection to store aggregation of News objects.
	 */
	protected $collNewss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collNewss.
	 */
	private $lastNewsCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseMeta object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->is_active = false;
	}

	/**
	 * Get the [title] column value.
	 * 
	 * @return     string
	 */
	public function getTitle()
	{
		return $this->title;
	}

	/**
	 * Get the [keywords] column value.
	 * 
	 * @return     string
	 */
	public function getKeywords()
	{
		return $this->keywords;
	}

	/**
	 * Get the [description] column value.
	 * 
	 * @return     string
	 */
	public function getDescription()
	{
		return $this->description;
	}

	/**
	 * Get the [is_active] column value.
	 * 
	 * @return     boolean
	 */
	public function getIsActive()
	{
		return $this->is_active;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Set the value of [title] column.
	 * 
	 * @param      string $v new value
	 * @return     Meta The current object (for fluent API support)
	 */
	public function setTitle($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->title !== $v) {
			$this->title = $v;
			$this->modifiedColumns[] = MetaPeer::TITLE;
		}

		return $this;
	} // setTitle()

	/**
	 * Set the value of [keywords] column.
	 * 
	 * @param      string $v new value
	 * @return     Meta The current object (for fluent API support)
	 */
	public function setKeywords($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->keywords !== $v) {
			$this->keywords = $v;
			$this->modifiedColumns[] = MetaPeer::KEYWORDS;
		}

		return $this;
	} // setKeywords()

	/**
	 * Set the value of [description] column.
	 * 
	 * @param      string $v new value
	 * @return     Meta The current object (for fluent API support)
	 */
	public function setDescription($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->description !== $v) {
			$this->description = $v;
			$this->modifiedColumns[] = MetaPeer::DESCRIPTION;
		}

		return $this;
	} // setDescription()

	/**
	 * Set the value of [is_active] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Meta The current object (for fluent API support)
	 */
	public function setIsActive($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->is_active !== $v || $v === false) {
			$this->is_active = $v;
			$this->modifiedColumns[] = MetaPeer::IS_ACTIVE;
		}

		return $this;
	} // setIsActive()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Meta The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = MetaPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Meta The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = MetaPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(MetaPeer::IS_ACTIVE))) {
				return false;
			}

			if ($this->is_active !== false) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->title = ($row[$startcol + 0] !== null) ? (string) $row[$startcol + 0] : null;
			$this->keywords = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->description = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->is_active = ($row[$startcol + 3] !== null) ? (boolean) $row[$startcol + 3] : null;
			$this->created_at = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->id = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 6; // 6 = MetaPeer::NUM_COLUMNS - MetaPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Meta object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(MetaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = MetaPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->collPartss = null;
			$this->lastPartsCriteria = null;

			$this->collAuthorss = null;
			$this->lastAuthorsCriteria = null;

			$this->collPhotoss = null;
			$this->lastPhotosCriteria = null;

			$this->collPagess = null;
			$this->lastPagesCriteria = null;

			$this->collFaqs = null;
			$this->lastFaqCriteria = null;

			$this->collArticless = null;
			$this->lastArticlesCriteria = null;

			$this->collNewss = null;
			$this->lastNewsCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseMeta:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(MetaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			MetaPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseMeta:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseMeta:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


    if ($this->isNew() && !$this->isColumnModified(MetaPeer::CREATED_AT))
    {
      $this->setCreatedAt(time());
    }

		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(MetaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseMeta:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			MetaPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = MetaPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = MetaPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += MetaPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collPartss !== null) {
				foreach ($this->collPartss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAuthorss !== null) {
				foreach ($this->collAuthorss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPhotoss !== null) {
				foreach ($this->collPhotoss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPagess !== null) {
				foreach ($this->collPagess as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collFaqs !== null) {
				foreach ($this->collFaqs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collArticless !== null) {
				foreach ($this->collArticless as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collNewss !== null) {
				foreach ($this->collNewss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = MetaPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collPartss !== null) {
					foreach ($this->collPartss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collAuthorss !== null) {
					foreach ($this->collAuthorss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPhotoss !== null) {
					foreach ($this->collPhotoss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPagess !== null) {
					foreach ($this->collPagess as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collFaqs !== null) {
					foreach ($this->collFaqs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collArticless !== null) {
					foreach ($this->collArticless as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collNewss !== null) {
					foreach ($this->collNewss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = MetaPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getTitle();
				break;
			case 1:
				return $this->getKeywords();
				break;
			case 2:
				return $this->getDescription();
				break;
			case 3:
				return $this->getIsActive();
				break;
			case 4:
				return $this->getCreatedAt();
				break;
			case 5:
				return $this->getId();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = MetaPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getTitle(),
			$keys[1] => $this->getKeywords(),
			$keys[2] => $this->getDescription(),
			$keys[3] => $this->getIsActive(),
			$keys[4] => $this->getCreatedAt(),
			$keys[5] => $this->getId(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = MetaPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setTitle($value);
				break;
			case 1:
				$this->setKeywords($value);
				break;
			case 2:
				$this->setDescription($value);
				break;
			case 3:
				$this->setIsActive($value);
				break;
			case 4:
				$this->setCreatedAt($value);
				break;
			case 5:
				$this->setId($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = MetaPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setTitle($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setKeywords($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setDescription($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setIsActive($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setCreatedAt($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setId($arr[$keys[5]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(MetaPeer::DATABASE_NAME);

		if ($this->isColumnModified(MetaPeer::TITLE)) $criteria->add(MetaPeer::TITLE, $this->title);
		if ($this->isColumnModified(MetaPeer::KEYWORDS)) $criteria->add(MetaPeer::KEYWORDS, $this->keywords);
		if ($this->isColumnModified(MetaPeer::DESCRIPTION)) $criteria->add(MetaPeer::DESCRIPTION, $this->description);
		if ($this->isColumnModified(MetaPeer::IS_ACTIVE)) $criteria->add(MetaPeer::IS_ACTIVE, $this->is_active);
		if ($this->isColumnModified(MetaPeer::CREATED_AT)) $criteria->add(MetaPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(MetaPeer::ID)) $criteria->add(MetaPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(MetaPeer::DATABASE_NAME);

		$criteria->add(MetaPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Meta (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setTitle($this->title);

		$copyObj->setKeywords($this->keywords);

		$copyObj->setDescription($this->description);

		$copyObj->setIsActive($this->is_active);

		$copyObj->setCreatedAt($this->created_at);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getPartss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addParts($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAuthorss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAuthors($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPhotoss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPhotos($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPagess() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPages($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getFaqs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addFaq($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getArticless() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addArticles($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getNewss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addNews($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Meta Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     MetaPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new MetaPeer();
		}
		return self::$peer;
	}

	/**
	 * Clears out the collPartss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPartss()
	 */
	public function clearPartss()
	{
		$this->collPartss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPartss collection (array).
	 *
	 * By default this just sets the collPartss collection to an empty array (like clearcollPartss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPartss()
	{
		$this->collPartss = array();
	}

	/**
	 * Gets an array of Parts objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Meta has previously been saved, it will retrieve
	 * related Partss from storage. If this Meta is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Parts[]
	 * @throws     PropelException
	 */
	public function getPartss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MetaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPartss === null) {
			if ($this->isNew()) {
			   $this->collPartss = array();
			} else {

				$criteria->add(PartsPeer::META_ID, $this->id);

				PartsPeer::addSelectColumns($criteria);
				$this->collPartss = PartsPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PartsPeer::META_ID, $this->id);

				PartsPeer::addSelectColumns($criteria);
				if (!isset($this->lastPartsCriteria) || !$this->lastPartsCriteria->equals($criteria)) {
					$this->collPartss = PartsPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPartsCriteria = $criteria;
		return $this->collPartss;
	}

	/**
	 * Returns the number of related Parts objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Parts objects.
	 * @throws     PropelException
	 */
	public function countPartss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MetaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPartss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PartsPeer::META_ID, $this->id);

				$count = PartsPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PartsPeer::META_ID, $this->id);

				if (!isset($this->lastPartsCriteria) || !$this->lastPartsCriteria->equals($criteria)) {
					$count = PartsPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collPartss);
				}
			} else {
				$count = count($this->collPartss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Parts object to this object
	 * through the Parts foreign key attribute.
	 *
	 * @param      Parts $l Parts
	 * @return     void
	 * @throws     PropelException
	 */
	public function addParts(Parts $l)
	{
		if ($this->collPartss === null) {
			$this->initPartss();
		}
		if (!in_array($l, $this->collPartss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPartss, $l);
			$l->setMeta($this);
		}
	}

	/**
	 * Clears out the collAuthorss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAuthorss()
	 */
	public function clearAuthorss()
	{
		$this->collAuthorss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAuthorss collection (array).
	 *
	 * By default this just sets the collAuthorss collection to an empty array (like clearcollAuthorss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAuthorss()
	{
		$this->collAuthorss = array();
	}

	/**
	 * Gets an array of Authors objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Meta has previously been saved, it will retrieve
	 * related Authorss from storage. If this Meta is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Authors[]
	 * @throws     PropelException
	 */
	public function getAuthorss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MetaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAuthorss === null) {
			if ($this->isNew()) {
			   $this->collAuthorss = array();
			} else {

				$criteria->add(AuthorsPeer::META_ID, $this->id);

				AuthorsPeer::addSelectColumns($criteria);
				$this->collAuthorss = AuthorsPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AuthorsPeer::META_ID, $this->id);

				AuthorsPeer::addSelectColumns($criteria);
				if (!isset($this->lastAuthorsCriteria) || !$this->lastAuthorsCriteria->equals($criteria)) {
					$this->collAuthorss = AuthorsPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAuthorsCriteria = $criteria;
		return $this->collAuthorss;
	}

	/**
	 * Returns the number of related Authors objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Authors objects.
	 * @throws     PropelException
	 */
	public function countAuthorss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MetaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAuthorss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AuthorsPeer::META_ID, $this->id);

				$count = AuthorsPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AuthorsPeer::META_ID, $this->id);

				if (!isset($this->lastAuthorsCriteria) || !$this->lastAuthorsCriteria->equals($criteria)) {
					$count = AuthorsPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collAuthorss);
				}
			} else {
				$count = count($this->collAuthorss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Authors object to this object
	 * through the Authors foreign key attribute.
	 *
	 * @param      Authors $l Authors
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAuthors(Authors $l)
	{
		if ($this->collAuthorss === null) {
			$this->initAuthorss();
		}
		if (!in_array($l, $this->collAuthorss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAuthorss, $l);
			$l->setMeta($this);
		}
	}

	/**
	 * Clears out the collPhotoss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPhotoss()
	 */
	public function clearPhotoss()
	{
		$this->collPhotoss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPhotoss collection (array).
	 *
	 * By default this just sets the collPhotoss collection to an empty array (like clearcollPhotoss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPhotoss()
	{
		$this->collPhotoss = array();
	}

	/**
	 * Gets an array of Photos objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Meta has previously been saved, it will retrieve
	 * related Photoss from storage. If this Meta is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Photos[]
	 * @throws     PropelException
	 */
	public function getPhotoss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MetaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPhotoss === null) {
			if ($this->isNew()) {
			   $this->collPhotoss = array();
			} else {

				$criteria->add(PhotosPeer::META_ID, $this->id);

				PhotosPeer::addSelectColumns($criteria);
				$this->collPhotoss = PhotosPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PhotosPeer::META_ID, $this->id);

				PhotosPeer::addSelectColumns($criteria);
				if (!isset($this->lastPhotosCriteria) || !$this->lastPhotosCriteria->equals($criteria)) {
					$this->collPhotoss = PhotosPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPhotosCriteria = $criteria;
		return $this->collPhotoss;
	}

	/**
	 * Returns the number of related Photos objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Photos objects.
	 * @throws     PropelException
	 */
	public function countPhotoss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MetaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPhotoss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PhotosPeer::META_ID, $this->id);

				$count = PhotosPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PhotosPeer::META_ID, $this->id);

				if (!isset($this->lastPhotosCriteria) || !$this->lastPhotosCriteria->equals($criteria)) {
					$count = PhotosPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collPhotoss);
				}
			} else {
				$count = count($this->collPhotoss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Photos object to this object
	 * through the Photos foreign key attribute.
	 *
	 * @param      Photos $l Photos
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPhotos(Photos $l)
	{
		if ($this->collPhotoss === null) {
			$this->initPhotoss();
		}
		if (!in_array($l, $this->collPhotoss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPhotoss, $l);
			$l->setMeta($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Meta is new, it will return
	 * an empty collection; or if this Meta has previously
	 * been saved, it will retrieve related Photoss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Meta.
	 */
	public function getPhotossJoinParts($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MetaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPhotoss === null) {
			if ($this->isNew()) {
				$this->collPhotoss = array();
			} else {

				$criteria->add(PhotosPeer::META_ID, $this->id);

				$this->collPhotoss = PhotosPeer::doSelectJoinParts($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PhotosPeer::META_ID, $this->id);

			if (!isset($this->lastPhotosCriteria) || !$this->lastPhotosCriteria->equals($criteria)) {
				$this->collPhotoss = PhotosPeer::doSelectJoinParts($criteria, $con, $join_behavior);
			}
		}
		$this->lastPhotosCriteria = $criteria;

		return $this->collPhotoss;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Meta is new, it will return
	 * an empty collection; or if this Meta has previously
	 * been saved, it will retrieve related Photoss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Meta.
	 */
	public function getPhotossJoinAuthors($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MetaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPhotoss === null) {
			if ($this->isNew()) {
				$this->collPhotoss = array();
			} else {

				$criteria->add(PhotosPeer::META_ID, $this->id);

				$this->collPhotoss = PhotosPeer::doSelectJoinAuthors($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PhotosPeer::META_ID, $this->id);

			if (!isset($this->lastPhotosCriteria) || !$this->lastPhotosCriteria->equals($criteria)) {
				$this->collPhotoss = PhotosPeer::doSelectJoinAuthors($criteria, $con, $join_behavior);
			}
		}
		$this->lastPhotosCriteria = $criteria;

		return $this->collPhotoss;
	}

	/**
	 * Clears out the collPagess collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPagess()
	 */
	public function clearPagess()
	{
		$this->collPagess = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPagess collection (array).
	 *
	 * By default this just sets the collPagess collection to an empty array (like clearcollPagess());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPagess()
	{
		$this->collPagess = array();
	}

	/**
	 * Gets an array of Pages objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Meta has previously been saved, it will retrieve
	 * related Pagess from storage. If this Meta is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Pages[]
	 * @throws     PropelException
	 */
	public function getPagess($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MetaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPagess === null) {
			if ($this->isNew()) {
			   $this->collPagess = array();
			} else {

				$criteria->add(PagesPeer::META_ID, $this->id);

				PagesPeer::addSelectColumns($criteria);
				$this->collPagess = PagesPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PagesPeer::META_ID, $this->id);

				PagesPeer::addSelectColumns($criteria);
				if (!isset($this->lastPagesCriteria) || !$this->lastPagesCriteria->equals($criteria)) {
					$this->collPagess = PagesPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPagesCriteria = $criteria;
		return $this->collPagess;
	}

	/**
	 * Returns the number of related Pages objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Pages objects.
	 * @throws     PropelException
	 */
	public function countPagess(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MetaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPagess === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PagesPeer::META_ID, $this->id);

				$count = PagesPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PagesPeer::META_ID, $this->id);

				if (!isset($this->lastPagesCriteria) || !$this->lastPagesCriteria->equals($criteria)) {
					$count = PagesPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collPagess);
				}
			} else {
				$count = count($this->collPagess);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Pages object to this object
	 * through the Pages foreign key attribute.
	 *
	 * @param      Pages $l Pages
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPages(Pages $l)
	{
		if ($this->collPagess === null) {
			$this->initPagess();
		}
		if (!in_array($l, $this->collPagess, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPagess, $l);
			$l->setMeta($this);
		}
	}

	/**
	 * Clears out the collFaqs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addFaqs()
	 */
	public function clearFaqs()
	{
		$this->collFaqs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collFaqs collection (array).
	 *
	 * By default this just sets the collFaqs collection to an empty array (like clearcollFaqs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initFaqs()
	{
		$this->collFaqs = array();
	}

	/**
	 * Gets an array of Faq objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Meta has previously been saved, it will retrieve
	 * related Faqs from storage. If this Meta is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Faq[]
	 * @throws     PropelException
	 */
	public function getFaqs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MetaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFaqs === null) {
			if ($this->isNew()) {
			   $this->collFaqs = array();
			} else {

				$criteria->add(FaqPeer::META_ID, $this->id);

				FaqPeer::addSelectColumns($criteria);
				$this->collFaqs = FaqPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(FaqPeer::META_ID, $this->id);

				FaqPeer::addSelectColumns($criteria);
				if (!isset($this->lastFaqCriteria) || !$this->lastFaqCriteria->equals($criteria)) {
					$this->collFaqs = FaqPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastFaqCriteria = $criteria;
		return $this->collFaqs;
	}

	/**
	 * Returns the number of related Faq objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Faq objects.
	 * @throws     PropelException
	 */
	public function countFaqs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MetaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collFaqs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(FaqPeer::META_ID, $this->id);

				$count = FaqPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(FaqPeer::META_ID, $this->id);

				if (!isset($this->lastFaqCriteria) || !$this->lastFaqCriteria->equals($criteria)) {
					$count = FaqPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collFaqs);
				}
			} else {
				$count = count($this->collFaqs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Faq object to this object
	 * through the Faq foreign key attribute.
	 *
	 * @param      Faq $l Faq
	 * @return     void
	 * @throws     PropelException
	 */
	public function addFaq(Faq $l)
	{
		if ($this->collFaqs === null) {
			$this->initFaqs();
		}
		if (!in_array($l, $this->collFaqs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collFaqs, $l);
			$l->setMeta($this);
		}
	}

	/**
	 * Clears out the collArticless collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addArticless()
	 */
	public function clearArticless()
	{
		$this->collArticless = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collArticless collection (array).
	 *
	 * By default this just sets the collArticless collection to an empty array (like clearcollArticless());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initArticless()
	{
		$this->collArticless = array();
	}

	/**
	 * Gets an array of Articles objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Meta has previously been saved, it will retrieve
	 * related Articless from storage. If this Meta is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Articles[]
	 * @throws     PropelException
	 */
	public function getArticless($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MetaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collArticless === null) {
			if ($this->isNew()) {
			   $this->collArticless = array();
			} else {

				$criteria->add(ArticlesPeer::META_ID, $this->id);

				ArticlesPeer::addSelectColumns($criteria);
				$this->collArticless = ArticlesPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ArticlesPeer::META_ID, $this->id);

				ArticlesPeer::addSelectColumns($criteria);
				if (!isset($this->lastArticlesCriteria) || !$this->lastArticlesCriteria->equals($criteria)) {
					$this->collArticless = ArticlesPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastArticlesCriteria = $criteria;
		return $this->collArticless;
	}

	/**
	 * Returns the number of related Articles objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Articles objects.
	 * @throws     PropelException
	 */
	public function countArticless(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MetaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collArticless === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ArticlesPeer::META_ID, $this->id);

				$count = ArticlesPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ArticlesPeer::META_ID, $this->id);

				if (!isset($this->lastArticlesCriteria) || !$this->lastArticlesCriteria->equals($criteria)) {
					$count = ArticlesPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collArticless);
				}
			} else {
				$count = count($this->collArticless);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Articles object to this object
	 * through the Articles foreign key attribute.
	 *
	 * @param      Articles $l Articles
	 * @return     void
	 * @throws     PropelException
	 */
	public function addArticles(Articles $l)
	{
		if ($this->collArticless === null) {
			$this->initArticless();
		}
		if (!in_array($l, $this->collArticless, true)) { // only add it if the **same** object is not already associated
			array_push($this->collArticless, $l);
			$l->setMeta($this);
		}
	}

	/**
	 * Clears out the collNewss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addNewss()
	 */
	public function clearNewss()
	{
		$this->collNewss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collNewss collection (array).
	 *
	 * By default this just sets the collNewss collection to an empty array (like clearcollNewss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initNewss()
	{
		$this->collNewss = array();
	}

	/**
	 * Gets an array of News objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Meta has previously been saved, it will retrieve
	 * related Newss from storage. If this Meta is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array News[]
	 * @throws     PropelException
	 */
	public function getNewss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MetaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNewss === null) {
			if ($this->isNew()) {
			   $this->collNewss = array();
			} else {

				$criteria->add(NewsPeer::META_ID, $this->id);

				NewsPeer::addSelectColumns($criteria);
				$this->collNewss = NewsPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(NewsPeer::META_ID, $this->id);

				NewsPeer::addSelectColumns($criteria);
				if (!isset($this->lastNewsCriteria) || !$this->lastNewsCriteria->equals($criteria)) {
					$this->collNewss = NewsPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastNewsCriteria = $criteria;
		return $this->collNewss;
	}

	/**
	 * Returns the number of related News objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related News objects.
	 * @throws     PropelException
	 */
	public function countNewss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MetaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collNewss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(NewsPeer::META_ID, $this->id);

				$count = NewsPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(NewsPeer::META_ID, $this->id);

				if (!isset($this->lastNewsCriteria) || !$this->lastNewsCriteria->equals($criteria)) {
					$count = NewsPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collNewss);
				}
			} else {
				$count = count($this->collNewss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a News object to this object
	 * through the News foreign key attribute.
	 *
	 * @param      News $l News
	 * @return     void
	 * @throws     PropelException
	 */
	public function addNews(News $l)
	{
		if ($this->collNewss === null) {
			$this->initNewss();
		}
		if (!in_array($l, $this->collNewss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collNewss, $l);
			$l->setMeta($this);
		}
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collPartss) {
				foreach ((array) $this->collPartss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAuthorss) {
				foreach ((array) $this->collAuthorss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPhotoss) {
				foreach ((array) $this->collPhotoss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPagess) {
				foreach ((array) $this->collPagess as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collFaqs) {
				foreach ((array) $this->collFaqs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collArticless) {
				foreach ((array) $this->collArticless as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collNewss) {
				foreach ((array) $this->collNewss as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collPartss = null;
		$this->collAuthorss = null;
		$this->collPhotoss = null;
		$this->collPagess = null;
		$this->collFaqs = null;
		$this->collArticless = null;
		$this->collNewss = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseMeta:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseMeta::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseMeta
